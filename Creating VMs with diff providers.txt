Creating multiple VMs in different regions with different providers
---
Imp point:
üîß Providers Setup
Two Azure providers declared:

Default: used for East US region.

alias = "Secondary": used for Central India region.

Required for deploying resources in multiple Azure regions under separate logical providers or subscriptions.

üì¶ Resource Groups
parakram-rg-tf1: in East US (default provider).

parakram-rg-tf2: in Central India (secondary provider).

üåê Networking
Virtual Networks (VNets):

parakram-vnet-tf1: for East US, address space 10.0.0.0/16.

parakram-vnet-tf2: for Central India, address space 10.1.0.0/16.

Subnets:

backend-subnet1: 10.0.1.0/24.

backend-subnet2: 10.1.1.0/24.

üåê NICs (Network Interface Cards)
Each VM is connected to its own subnet via a separate NIC.

Dynamic private IP assignment.

Tagged with "environment = backend".

üíª Virtual Machines (Ubuntu Linux)
Both VMs use Ubuntu 22.04 LTS from Canonical.

Size: Standard_B1s, with 30GB OS disk.

SSH access configured using ~/.ssh/id_rsa.pub.

VM1 (example1) is deployed first.

VM2 (example2) has a depends_on block ensuring it is created after VM1.

üì¶ Terraform Settings
Using azurerm provider version 2.40.0.

terraform block ensures provider plugin is correctly sourced and versioned.

---
provider "azurerm" {

 features {}

}

provider "azurerm" {


 alias = "Secondary"
 features {}

}

# Define the resource group for VM1

resource "azurerm_resource_group" "example1" {

 name = "parakram-rg-tf1"

 location = "East US"

}
# Define the resource group for VM2

resource "azurerm_resource_group" "example2" {

 name = "parakram-rg-tf2"

 location = "Central India"

 provider = azurerm.Secondary

}

# Define the virtual network for VM1

resource "azurerm_virtual_network" "example1" {

 name = "parakram-vnet-tf1"

 location = azurerm_resource_group.example1.location

 resource_group_name = azurerm_resource_group.example1.name

 address_space = ["10.0.0.0/16"]

}

# Define the virtual network for VM2

resource "azurerm_virtual_network" "example2" {

 name = "parakram-vnet-tf2"

 location = azurerm_resource_group.example2.location

 resource_group_name = azurerm_resource_group.example2.name

 address_space = ["10.1.0.0/16"]

}

# Define the subnet for VM1

resource "azurerm_subnet" "example1" {

 name = "backend-subnet1"

 resource_group_name = azurerm_resource_group.example1.name

 virtual_network_name = azurerm_virtual_network.example1.name

 address_prefixes = ["10.0.1.0/24"]

}
# Define the subnet for VM2

resource "azurerm_subnet" "example2" {

 name = "backend-subnet2"

 resource_group_name = azurerm_resource_group.example2.name

 virtual_network_name = azurerm_virtual_network.example2.name

 address_prefixes = ["10.1.1.0/24"]

}

# Define the Network Interface Card for VM1 (NIC)

resource "azurerm_network_interface" "example1" {

 name = "parakram-nic"

 location = azurerm_virtual_network.example1.location

 resource_group_name = azurerm_resource_group.example.name

 # IP configuration block

 ip_configuration {

  name = "internal"

  subnet_id = azurerm_subnet.example1.id

  private_ip_address_allocation = "Dynamic"

 }

 tags = {

  environment = "backend"

 }

}
#NIC-2
resource "azurerm_network_interface" "example2" {
  name                = "parakram-nic-2"
  location            = azurerm_virtual_network.example2.location
  resource_group_name = azurerm_resource_group.example2.name

  ip_configuration {
    name                          = "internal"
    subnet_id                     = azurerm_subnet.example2.id
    private_ip_address_allocation = "Dynamic"
  }

  tags = {
    environment = "backend"
  }
}


# Define the VM

resource "azurerm_linux_virtual_machine" "example1" {

 name = "parakram-tf-vm1"

 resource_group_name = azurerm_resource_group.example1.name

 location = azurerm_virtual_network.example1.location

 size = "Standard_B1s"

 admin_username = "parakram"

 # OS disk block

 os_disk {

  name = "parakram-tf-os-disk1"

  caching = "ReadWrite"

  storage_account_type = "Standard_LRS"

  disk_size_gb = 30

 }

 admin_ssh_key {

  username = "parakram"

  public_key = file("~/.ssh/id_rsa.pub") # You can generate a new SSH key if you want

 }

 # Specify the image using source_image_reference

 source_image_reference {

  publisher = "Canonical"

  offer = "0001-com-ubuntu-server-jammy"

  sku = "22_04-lts"

  version = "latest"

 }

 network_interface_ids = [azurerm_network_interface.example1.id]

 tags = {

  environment = "backend1"

 }

}

resource "azurerm_linux_virtual_machine" "example2" {

 name = "parakram-tf-vm2"

 resource_group_name = azurerm_resource_group.example2.name

 location = azurerm_virtual_network.example2.location

 size = "Standard_B1s"

 admin_username = "parakram"

 # OS disk block

 os_disk {

  name = "parakram-tf-os-disk2"

  caching = "ReadWrite"

  storage_account_type = "Standard_LRS"

  disk_size_gb = 30

 }

 admin_ssh_key {

  username = "parakram"

  public_key = file("~/.ssh/id_rsa.pub") # You can generate a new SSH key if you want

 }

 # Specify the image using source_image_reference

 source_image_reference {

  publisher = "Canonical"

  offer = "0001-com-ubuntu-server-jammy"

  sku = "22_04-lts"

  version = "latest"

 }

 network_interface_ids = [azurerm_network_interface.example2.id]
 depends_on=[azurerm_linux_virtual_machine.example1]

 tags = {

  environment = "backend2"

 }

}

terraform{

 required_providers {

  azurerm = {

   source = "hashicorp/azurerm"

   version = "2.40.0"

  }

 }

}



